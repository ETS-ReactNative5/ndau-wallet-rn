// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`testing SetupUserId... renders correctly 1`] = `
<RCTSafeAreaView
  style={
    Object {
      "backgroundColor": "#1c2227",
      "flex": 1,
    }
  }
>
  <View
    style={
      Object {
        "backgroundColor": "#1c2227",
        "flex": 1,
        "paddingBottom": 10,
        "paddingLeft": 10,
        "paddingRight": 10,
        "paddingTop": 10,
      }
    }
  >
    <RCTScrollView
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <View>
        <View>
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#ffffff",
                "fontSize": 20,
              }
            }
          >
            Verify your User ID 
          </Text>
        </View>
        <View>
          <RCTProgressView
            progress={0.125}
            style={
              Array [
                Object {
                  "height": 2,
                },
                undefined,
              ]
            }
          />
        </View>
        <View>
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#ffffff",
                "fontSize": 20,
              }
            }
          >
            In order to deliver your ndau to this wallet on Genesis Day, we need the six-character code you use to access the ndau dashboard.
          </Text>
        </View>
        <TextInput
          allowFontScaling={true}
          autoCapitalize="characters"
          onChangeText={[Function]}
          placeholder="Enter your unique User ID"
          placeholderTextColor="#333"
          value=""
        />
        <View
          style={
            Object {
              "display": "flex",
              "flexDirection": "column",
              "justifyContent": "space-between",
              "paddingBottom": 10,
              "paddingTop": 10,
            }
          }
        >
          <View
            accessibilityComponentType="button"
            accessibilityTraits={
              Array [
                "button",
              ]
            }
            accessible={true}
            isTVSelectable={true}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
          >
            <View
              style={
                Array [
                  Object {},
                ]
              }
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {
                      "color": "#007AFF",
                      "fontSize": 18,
                      "padding": 8,
                      "textAlign": "center",
                    },
                    Object {
                      "color": "#4d9678",
                    },
                  ]
                }
              >
                Verify
              </Text>
            </View>
          </View>
        </View>
        <View
          style={
            Object {
              "display": "flex",
              "flexDirection": "column",
              "justifyContent": "space-between",
              "paddingBottom": 10,
              "paddingTop": 10,
            }
          }
        >
          <View
            accessibilityComponentType="button"
            accessibilityTraits={
              Array [
                "button",
              ]
            }
            accessible={true}
            isTVSelectable={true}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
          >
            <View
              style={
                Array [
                  Object {},
                ]
              }
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {
                      "color": "#007AFF",
                      "fontSize": 18,
                      "padding": 8,
                      "textAlign": "center",
                    },
                    Object {
                      "color": "#4d9678",
                    },
                  ]
                }
              >
                I don't have an ID
              </Text>
            </View>
          </View>
        </View>
        <View
          style={
            Object {
              "paddingTop": 40,
            }
          }
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#ffffff",
                "fontSize": 20,
              }
            }
          >
            We will send you an email to confirm you are the account holder.
          </Text>
          <View
            accessibilityComponentType="button"
            accessibilityTraits={
              Array [
                "button",
              ]
            }
            accessible={true}
            isTVSelectable={true}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
          >
            <View
              style={
                Array [
                  Object {},
                ]
              }
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {
                      "color": "#007AFF",
                      "fontSize": 18,
                      "padding": 8,
                      "textAlign": "center",
                    },
                    Object {
                      "color": "#4d9678",
                    },
                  ]
                }
              >
                Send email
              </Text>
            </View>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
</RCTSafeAreaView>
`;
